name: Rust

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

jobs:
  build_and_test:
    if: ( ! github.event.pull_request.draft )
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Stable
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v2.5.0

      - name: "Build"
        run: cargo build

      - name: "Test"
        run: cargo test --lib --bins --tests --examples --workspace

      - name: "Check documentation"
        # env:
        #   RUSTDOCFLAGS: -D warnings
        run: cargo doc --no-deps --workspace --lib --document-private-items --examples

  miri:
    if: ( ! github.event.pull_request.draft )
    name: "Miri"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Miri
        run: |
          rustup toolchain install nightly --component miri
          rustup override set nightly
          cargo miri setup
      
      - name: Test with Miri on x86_64
        run: cargo miri test -p clmul -p matrix-transpose --target x86_64-unknown-linux-gnu
      
      - name: Test with Miri on aarch64
        run: cargo miri test -p clmul -p matrix-transpose --target aarch64-unknown-linux-gnu

  rustfmt_and_clippy:
    name: Rustfmt and Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Nightly with rustfmt and clipy
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          components: rustfmt, clippy

      - name: "Check formatting"
        run: cargo +nightly fmt --check --all

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features